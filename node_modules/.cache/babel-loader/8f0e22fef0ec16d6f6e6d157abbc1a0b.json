{"ast":null,"code":"import { ADD_BOOK, DELETE_BOOK } from '../actions'; // import { addBook, addBook } from '../actions'\n\nconst initialState = {\n  booksArray: [{\n    id: 0,\n    name: 'Lord of the flies',\n    price: 12.00,\n    category: 'dystopian'\n  }]\n};\n\nfunction nextBookId(booksArray) {\n  const maxId = booksArray.reduce((maxId, booksArray) => Math.max(booksArray.id, maxId), -1);\n  return maxId + 1;\n}\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case ADD_BOOK:\n      // console.log(\"Book in reducer \" + JSON.stringify({...state, booksArray: [ ...state.booksArray, {id: nextBookId(state.booksArray),\n      //     name: action.payload.name, price: action.payload.price, category: action.payload.category}]  }));\n      {\n        return { ...state,\n          booksArray: [...state.booksArray, {\n            id: nextBookId(state.booksArray),\n            name: action.payload.name,\n            price: action.payload.price,\n            category: action.payload.category\n          }]\n        };\n      }\n\n    case DELETE_BOOK:\n      // const newEntities = action.payload\n      // const newEntities =  [...state.booksArray, {id: nextBookId(state.booksArray),\n      //     name: action.payload.name, price: action.payload.price, category: action.payload.category}];\n      // console.log('reducer ' + JSON.stringify(newEntities))\n      // delete newEntities[{id: nextBookId(state.booksArray),\n      //     name: action.payload.name, price: action.payload.price, category: action.payload.category}]\n      // delete newEntities;\n      {\n        console.log(\"Book inbnm,, \" + JSON.stringify({ ...state,\n          booksArray: [...state.booksArray, {\n            id: nextBookId(state.booksArray),\n            name: action.payload.name,\n            price: action.payload.price,\n            category: action.payload.category\n          }]\n        }));\n        return { ...state,\n          booksArray: [...state.booksArray, {\n            id: nextBookId(state.booksArray),\n            name: action.payload.name,\n            price: action.payload.price,\n            category: action.payload.category\n          }]\n        }; // ...state,\n        // booksArray: {booksArray: state.booksArray.filter((bookArray, book) => book !== action.payload)}\n      }\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:/Mary/test_tasks/booksList/bookslist/src/redux/reducers/bookslist.reducer.js"],"names":["ADD_BOOK","DELETE_BOOK","initialState","booksArray","id","name","price","category","nextBookId","maxId","reduce","Math","max","state","action","type","payload","console","log","JSON","stringify"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,YAAtC,C,CACA;;AAEA,MAAMC,YAAY,GAAG;AAACC,EAAAA,UAAU,EAAE,CAAC;AAACC,IAAAA,EAAE,EAAE,CAAL;AAAQC,IAAAA,IAAI,EAAE,mBAAd;AAAmCC,IAAAA,KAAK,EAAE,KAA1C;AAAiDC,IAAAA,QAAQ,EAAE;AAA3D,GAAD;AAAb,CAArB;;AAGA,SAASC,UAAT,CAAoBL,UAApB,EAAgC;AAC5B,QAAMM,KAAK,GAAGN,UAAU,CAACO,MAAX,CAAkB,CAACD,KAAD,EAAQN,UAAR,KAAuBQ,IAAI,CAACC,GAAL,CAAST,UAAU,CAACC,EAApB,EAAwBK,KAAxB,CAAzC,EAAyE,CAAC,CAA1E,CAAd;AACA,SAAOA,KAAK,GAAG,CAAf;AACH;;AAGD,eAAe,UAASI,KAAK,GAAGX,YAAjB,EAA+BY,MAA/B,EAAuC;AAClD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKf,QAAL;AACA;AACA;AACG;AAAE,eAAO,EAAC,GAAGa,KAAJ;AAAWV,UAAAA,UAAU,EAAE,CAAE,GAAGU,KAAK,CAACV,UAAX,EAAuB;AAACC,YAAAA,EAAE,EAAEI,UAAU,CAACK,KAAK,CAACV,UAAP,CAAf;AACtDE,YAAAA,IAAI,EAAES,MAAM,CAACE,OAAP,CAAeX,IADiC;AAC3BC,YAAAA,KAAK,EAAEQ,MAAM,CAACE,OAAP,CAAeV,KADK;AACEC,YAAAA,QAAQ,EAAEO,MAAM,CAACE,OAAP,CAAeT;AAD3B,WAAvB;AAAvB,SAAP;AAC8F;;AAEnG,SAAKN,WAAL;AACI;AACA;AACA;AACI;AACJ;AACA;AACA;AACD;AAAEgB,QAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkBC,IAAI,CAACC,SAAL,CAAe,EAAC,GAAGP,KAAJ;AAAWV,UAAAA,UAAU,EAAE,CAAE,GAAGU,KAAK,CAACV,UAAX,EAAuB;AAACC,YAAAA,EAAE,EAAEI,UAAU,CAACK,KAAK,CAACV,UAAP,CAAf;AACxFE,YAAAA,IAAI,EAAES,MAAM,CAACE,OAAP,CAAeX,IADmE;AAC7DC,YAAAA,KAAK,EAAEQ,MAAM,CAACE,OAAP,CAAeV,KADuC;AAChCC,YAAAA,QAAQ,EAAEO,MAAM,CAACE,OAAP,CAAeT;AADO,WAAvB;AAAvB,SAAf,CAA9B;AAED,eAAO,EACH,GAAGM,KADA;AACOV,UAAAA,UAAU,EAAE,CAAE,GAAGU,KAAK,CAACV,UAAX,EAAuB;AAACC,YAAAA,EAAE,EAAEI,UAAU,CAACK,KAAK,CAACV,UAAP,CAAf;AACzCE,YAAAA,IAAI,EAAES,MAAM,CAACE,OAAP,CAAeX,IADoB;AACdC,YAAAA,KAAK,EAAEQ,MAAM,CAACE,OAAP,CAAeV,KADR;AACeC,YAAAA,QAAQ,EAAEO,MAAM,CAACE,OAAP,CAAeT;AADxC,WAAvB;AADnB,SAAP,CAFD,CAKK;AACA;AACD;;AAEH;AACA,aAAOM,KAAP;AAzBR;AA2BH","sourcesContent":["import { ADD_BOOK, DELETE_BOOK } from '../actions';\r\n// import { addBook, addBook } from '../actions'\r\n\r\nconst initialState = {booksArray: [{id: 0, name: 'Lord of the flies', price: 12.00, category: 'dystopian'}]};\r\n\r\n\r\nfunction nextBookId(booksArray) {\r\n    const maxId = booksArray.reduce((maxId, booksArray) => Math.max(booksArray.id, maxId), -1)\r\n    return maxId + 1\r\n}\r\n\r\n\r\nexport default function(state = initialState, action) {\r\n    switch(action.type) {\r\n        case ADD_BOOK: \r\n        // console.log(\"Book in reducer \" + JSON.stringify({...state, booksArray: [ ...state.booksArray, {id: nextBookId(state.booksArray),\r\n        //     name: action.payload.name, price: action.payload.price, category: action.payload.category}]  }));\r\n           { return {...state, booksArray: [ ...state.booksArray, {id: nextBookId(state.booksArray),\r\n            name: action.payload.name, price: action.payload.price, category: action.payload.category}]  }}\r\n            \r\n        case DELETE_BOOK:\r\n            // const newEntities = action.payload\r\n            // const newEntities =  [...state.booksArray, {id: nextBookId(state.booksArray),\r\n            //     name: action.payload.name, price: action.payload.price, category: action.payload.category}];\r\n                // console.log('reducer ' + JSON.stringify(newEntities))\r\n            // delete newEntities[{id: nextBookId(state.booksArray),\r\n            //     name: action.payload.name, price: action.payload.price, category: action.payload.category}]\r\n            // delete newEntities;\r\n           { console.log(\"Book inbnm,, \" + JSON.stringify({...state, booksArray: [ ...state.booksArray, {id: nextBookId(state.booksArray),\r\n                name: action.payload.name, price: action.payload.price, category: action.payload.category}]  }));\r\n            return {\r\n                ...state, booksArray: [ ...state.booksArray, {id: nextBookId(state.booksArray),\r\n                    name: action.payload.name, price: action.payload.price, category: action.payload.category}]  }\r\n                // ...state,\r\n                // booksArray: {booksArray: state.booksArray.filter((bookArray, book) => book !== action.payload)}\r\n              }\r\n\r\n            default: \r\n            return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}